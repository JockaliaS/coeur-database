#!/bin/bash
set -e

echo "üöÄ D√©marrage MySQL + Health Server pour Render..."

# Gestion des signaux d'arr√™t
cleanup() {
    echo "üõë Arr√™t propre des services..."
    if [ -n "$MYSQL_PID" ]; then
        kill $MYSQL_PID 2>/dev/null || true
    fi
    if [ -n "$HEALTH_PID" ]; then
        kill $HEALTH_PID 2>/dev/null || true
    fi
    exit 0
}

trap cleanup SIGTERM SIGINT

# D√©marrer MySQL en arri√®re-plan
echo "üìÄ Initialisation MySQL..."
docker-entrypoint.sh mysqld \
    --bind-address=0.0.0.0 \
    --port=3306 \
    --character-set-server=utf8mb4 \
    --collation-server=utf8mb4_unicode_ci \
    --max-connections=200 &

MYSQL_PID=$!

# Attendre que MySQL soit op√©rationnel
echo "‚è≥ Attente d√©marrage MySQL..."
for i in {1..60}; do
    if mysqladmin ping -h localhost --silent 2>/dev/null; then
        echo "‚úÖ MySQL pr√™t sur port 3306 !"
        break
    fi
    echo "   Tentative $i/60..."
    sleep 2
done

# V√©rification finale
if ! mysqladmin ping -h localhost --silent 2>/dev/null; then
    echo "‚ùå ERREUR: MySQL n'a pas pu d√©marrer dans les temps"
    exit 1
fi

# D√©marrer health server
echo "üåê D√©marrage health check sur port $PORT..."
/usr/local/bin/health-server.sh &
HEALTH_PID=$!

echo "üéâ Services op√©rationnels !"
echo "   ‚Ä¢ MySQL: localhost:3306"
echo "   ‚Ä¢ Health Check: localhost:$PORT"
echo "   ‚Ä¢ Base: $MYSQL_DATABASE"
echo "   ‚Ä¢ User: $MYSQL_USER"

# Maintenir le processus principal actif
wait $MYSQL_PID
